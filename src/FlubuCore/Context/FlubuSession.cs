using System;using System.Diagnostics;using FlubuCore.Context.FluentInterface;using FlubuCore.Scripting;using FlubuCore.Targeting;using FlubuCore.Tasks;using Microsoft.Extensions.Logging;namespace FlubuCore.Context{    public class FlubuSession : TaskContextInternal, IFlubuSession    {        private readonly Stopwatch _stopwatch = new Stopwatch();        private bool _disposed;        public FlubuSession(            ILogger<FlubuSession> log,            TargetTree targetTree,            CommandArguments args,            IScriptServiceProvider scriptServiceProvider,            ITaskFactory taskFactory,            IFluentInterfaceFactory fluentFactory,            IBuildPropertiesSession properties,            IBuildServer buildServers)            : base(log, properties, args, targetTree, buildServers, taskFactory, fluentFactory)        {            HasFailed = true;            ScriptServiceProvider = scriptServiceProvider;        }        public IScriptServiceProvider ScriptServiceProvider { get; }        public bool InteractiveMode { get; set; }        public bool InitializeTargetTree { get; set; } = true;        public CommandArguments InteractiveArgs { get; set; }        public bool HasFailed { get; private set; }        public bool? UnknownTarget { get; set; }        public Stopwatch BuildStopwatch        {            get { return _stopwatch; }        }        public void Start()        {            HasFailed = true;            _stopwatch.Reset();            _stopwatch.Start();        }        /// <summary>        ///     Marks the runner as having completed its work successfully. This is the last method        ///     that should be called on the runner before it gets disposed.        /// </summary>        public void Complete()        {            ResetDepth();            HasFailed = false;        }        protected override void Dispose(bool disposing)        {            if (!_disposed)            {                if (disposing)                {                }                _disposed = true;            }            _stopwatch.Stop();            base.Dispose(disposing);        }    }}